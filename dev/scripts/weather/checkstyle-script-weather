#!/bin/bash
# Script to run checkstyle using custom checks on SUBDIR student submissions
# Acknowledgement - Rachel Cardell-Oliver for providing initial script that has been adapted

# Alex Bagini May, 2011

# Update to include Std Dev method Feb 2012

# Student folder
STU=$1    ; shift


# Variables

#Location of required files - jars and xml
TESTDIR=~/JavaPatterns/dev/src-test
#Location of the student code
SUBDIR=~/WeatherRecordArchive
#Location of the output for individual summaries
OUTDIR=/home/baggers/output-weather

PROG=WeatherRecord

#Location of configuration XML file
CHECKXML=$TESTDIR/forcheck
#Location of checkstyle jar
CHECKSTYLE=$TESTDIR/checkstyle-5.5-all.jar
#Location of custom rules jar
CUSTOMRULES=$TESTDIR/new.jar

#Check student dir exists
STUDIR=$SUBDIR/submissions/$STU
if [ ! -d $STUDIR ] ; then
    echo "Directory $STUDIR not found"
    exit 1
fi

#Check output dir exists
if [ ! -d $OUTDIR ] ; then
	echo "Creating $OUTDIR"
	mkdir -m 777 $OUTDIR
fi

#Check student output dir exists
if [ ! -d $OUTDIR/$STU ] ; then
	echo "Created dir $OUTDIR/$STU"
	mkdir -m 777 $OUTDIR/$STU
fi

FEEDBACK=$OUTDIR/$STU/Feedback.txt
SUMMARY=$OUTDIR/total-summary.txt
FAILLIST=$OUTDIR/fail-list.txt
EXCLIST=$OUTDIR/exc-list.txt
MATRIX=/home/baggers/Weather-Matrix-MaxMin.txt
MATRIX2=/home/baggers/Weather-Matrix-SDAvg.txt

echo "Marking $PROG for $STU at $(date +%Y-%m-%d" "%H:%M)" > $FEEDBACK #start a new feedback file

cd $STUDIR

#1. Check file exists
if [ ! -f $PROG.java ] ; then
   echo "$PROG.java not found. Please check file name and resubmit"
   exit 1
else
	echo "$PROG.java found"
	echo "$PROG.java file submitted." >> $FEEDBACK
fi


#2. Run checkstyle tests with custom java pattern checks
echo "Running Checkstyle with $CHECKXML.xml configuration." >> $FEEDBACK

#Output results to summary file
java -classpath $CUSTOMRULES:$CHECKSTYLE com.puppycrawl.tools.checkstyle.Main -c $CHECKXML.xml $PROG.java >> $SUMMARY	
#Output to student feedback file
java -classpath $CUSTOMRULES:$CHECKSTYLE com.puppycrawl.tools.checkstyle.Main -c $CHECKXML.xml $PROG.java >> $FEEDBACK


#Debug output for list of students where checks did not work correctly or simply they failed the checks
TEMP=`grep -c "Err_SFL_Fail" $FEEDBACK`
TEMP2=`grep -c "Got an exception" $FEEDBACK`

if [ $TEMP -gt 0 ] ; then
	echo $STU >> $FAILLIST
fi

if [ $TEMP2 -gt 0 ] ; then
	echo $STU >> $EXCLIST
fi

echo "Checkstyle test complete." >> $FEEDBACK


#Add check results to matrix

#PREAMBLE
echo -n $STU >>$MATRIX
echo -n $STU >>$MATRIX2

LEN=`expr length "$STU"`

#extra tab for short names to align correctly
if [ $LEN -lt 9 ] ; then
	echo -ne "\t" >>$MATRIX
	echo -ne "\t" >>$MATRIX2
fi

#extra tab for extra short names
if [ $LEN -lt 8 ] ; then
	echo -ne "\t" >>$MATRIX
	echo -ne "\t" >>$MATRIX2
fi


#Maximum (M)
FM=`grep -c "Suc_SFL_For 'maximum'" $FEEDBACK`
FCM=`grep -c "Suc_SFL_ForCond 'maximum'" $FEEDBACK`
LVRM=`grep -c "Suc_SFL_LocalVarRead 'maximum'" $FEEDBACK`
LVWM=`grep -c "Suc_SFL_LocalVarWrite 'maximum'" $FEEDBACK`
PM=`grep -c "Complete_Pass 'maximum'" $FEEDBACK`

if [ $PM -gt 0 ] ; then
	echo -ne " |Y" >> $MATRIX
else
	echo -ne " |N" >> $MATRIX
fi

if [ $FM -gt 0 ] ; then
	echo -ne "\t Y" >> $MATRIX
else
	echo -ne "\t N" >> $MATRIX
fi

if [ $FCM -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX
else
	echo -ne "\t\t N" >> $MATRIX
fi

if [ $LVRM -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX
else
	echo -ne "\t\t N" >> $MATRIX
fi

if [ $LVWM -gt 0 ] ; then
	echo -ne "\t\t\t Y" >> $MATRIX
else
	echo -ne "\t\t\t N" >> $MATRIX
fi


#Minimum (Mi)
FMi=`grep -c "Suc_SFL_For 'minimum'" $FEEDBACK`
FCMi=`grep -c "Suc_SFL_ForCond 'minimum'" $FEEDBACK`
LVRMi=`grep -c "Suc_SFL_LocalVarRead 'minimum'" $FEEDBACK`
LVWMi=`grep -c "Suc_SFL_LocalVarWrite 'minimum'" $FEEDBACK`
PMi=`grep -c "Complete_Pass 'minimum'" $FEEDBACK`


if [ $PMi -gt 0 ] ; then
	echo -ne "\t\t\t|Y" >> $MATRIX
else
	echo -ne "\t\t\t|N" >> $MATRIX
fi


if [ $FMi -gt 0 ] ; then
	echo -ne "\t Y" >> $MATRIX
else
	echo -ne "\t N" >> $MATRIX
fi

if [ $FCMi -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX
else
	echo -ne "\t\t N" >> $MATRIX
fi

if [ $LVRMi -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX
else
	echo -ne "\t\t N" >> $MATRIX
fi

if [ $LVWMi -gt 0 ] ; then
	echo -e "\t\t\t Y" >> $MATRIX
else
	echo -e "\t\t\t N" >> $MATRIX
fi


#Std Dev (SD)
FSD=`grep -c "Suc_SFL_For 'stddeviation'" $FEEDBACK`
FCSD=`grep -c "Suc_SFL_ForCond 'stddeviation'" $FEEDBACK`
LVRSD=`grep -c "Suc_SFL_LocalVarRead 'stddeviation'" $FEEDBACK`
LVWSD=`grep -c "Suc_SFL_LocalVarWrite 'stddeviation'" $FEEDBACK`
PSD=`grep -c "Complete_Pass 'stddeviation'" $FEEDBACK`


if [ $PSD -gt 0 ] ; then
	echo -ne " |Y" >> $MATRIX2
else
	echo -ne " |N" >> $MATRIX2
fi


if [ $FSD -gt 0 ] ; then
	echo -ne "\t Y" >> $MATRIX2
else
	echo -ne "\t N" >> $MATRIX2
fi

if [ $FCSD -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX2
else
	echo -ne "\t\t N" >> $MATRIX2
fi

if [ $LVRSD -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX2
else
	echo -ne "\t\t N" >> $MATRIX2
fi

if [ $LVWSD -gt 0 ] ; then
	echo -ne "\t\t\t Y" >> $MATRIX2
else
	echo -ne "\t\t\t N" >> $MATRIX2
fi

#Average(A)
FA=`grep -c "Suc_SFL_For 'average'" $FEEDBACK`
FCA=`grep -c "Suc_SFL_ForCond 'average'" $FEEDBACK`
LVRA=`grep -c "Suc_SFL_LocalVarRead 'average'" $FEEDBACK`
LVWA=`grep -c "Suc_SFL_LocalVarWrite 'average'" $FEEDBACK`
PA=`grep -c "Complete_Pass 'average'" $FEEDBACK`


if [ $PA -gt 0 ] ; then
	echo -ne "\t\t\t|Y" >> $MATRIX2
else
	echo -ne "\t\t\t|N" >> $MATRIX2
fi


if [ $FA -gt 0 ] ; then
	echo -ne "\t Y" >> $MATRIX2
else
	echo -ne "\t N" >> $MATRIX2
fi

if [ $FCA -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX2
else
	echo -ne "\t\t N" >> $MATRIX2
fi

if [ $LVRA -gt 0 ] ; then
	echo -ne "\t\t Y" >> $MATRIX2
else
	echo -ne "\t\t N" >> $MATRIX2
fi

if [ $LVWA -gt 0 ] ; then
	echo -e "\t\t\t Y" >> $MATRIX2
else
	echo -e "\t\t\t N" >> $MATRIX2
fi



exit 0

